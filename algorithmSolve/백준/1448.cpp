#include <iostream>
#include <algorithm>

using namespace std;

// 풀이.
// 삼각형의 세변의 공식때문에 꽤나 헤맸다. 처음에는 직각삼각형, 이등변삼각형, 정삼각형 등의 공식을 사용하기 위해
// 세 길이가 삼각형을 이룰수 있는지에 대한 함수까지 만들었었다. 실제로는 가장 긴 길이가 나머지 두개의 합보다 작다면
// 삼각형을 만들수 있다는 공식이 존재했다. 엄청 어렸을적에 배운건지 전혀 기억이 안났다. 알아두자;
// 이것만 알면 나머지는 크게 어렵지 않다. 다만 for문이 조금 이해안갈수도 있다. 맨뒤부터 가장 긴 길이로 가정하고
// 순회를 하는데 처음에는 왜 연속된 3개의 길이만 가정하는지 이해가 잘 안갔다. 생각해보면 당연한건데 어떠한 원소를
// 가장 긴 길이로 가정했을때 그 바로 앞에 2개로 검사를 해본다. 만약 이때 합의 길이가 더 짧아서 삼각형을 이룰수 없다면
// 이미 정렬된 상태이므로 그 앞에 어떤 원소들을 사용해도 불가능하다. 또한 합이 더 길어서 삼각형을 이룰수 있다면
// 현재 바로 앞에 2개가 가장 긴 원소들이니 더 앞까지 갈필요도 없다. 그렇기 때문에 3개씩 묶어야 한다.

// 자세한 설명은 주석으로 남긴다.

int board[1000000];
int N, answer = -1;

void MakeAnswer()
{
    // 상술한 방법을 통해 for문의 순회를 간단하게 하기 위해 정렬을 한다.
    sort(board, board + N);
    for (int i = N - 3; i >= 0; --i)
        // 가장 긴 길이로 가정한 원소의 바로 앞 2개의 합이 그 원소보다 길다면 삼각형을 이룰수 있으므로
        // 답을 구하고 for문을 탈출한다.
        if (board[i] + board[i + 1] > board[i + 2])
        {
            answer = board[i] + board[i + 1] + board[i + 2];
            break;
        }
    cout << answer << '\n';
}

void Input()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> N;
    for (int i = 0; i < N; ++i)
        cin >> board[i];
}

int main()
{
    Input();
    MakeAnswer();
    return 0;
}