#include <iostream>

using namespace std;

//처음에는 문제를 대충 읽어서 좀 헤맸던 문제. 문제를 잘 읽자.

//풀이
//이 문제에서 중요한점 중 하나는 왼쪽으로는 이동하지 않고 무조건 오른쪽으로만 이동을 한다는 점이다. 그렇기에 이동부분은 오른쪽 이동만 신경 쓰면
//겹치지 않고 맨 왼쪽에서 시작해 오른쪽으로 이동하면 최대점을 알수있다.
 
//우선 세로가 1일때에는 이동이 전혀 불가능하므로 시작점인 1이다
 
//세로가 2일때에는 2번, 3번 이동은 가능하다. 다만, 4개중 2개의 이동만 가능하므로 움직일수 있는 최대 칸은 4이며, 이때 이동한 점의 위치는 
//1,3,5,7 등등으로 (가로 + 1) / 2로 표현할수 있다.
 
//세로가 3이상일때에는 4개의 이동을 모두 사용할수 있다. 최대한 많은 점을 이동하기 위해서는 가로로 1칸씩 움직이는 1,4번 이동을 해야하지만,
//위 상술하였듯이 4칸이상 이동하는 이른바 최대로 이동하기 위해서는 4개의 이동 모두를 사용해야하고, 1에서 시작할때 다른 종류의 4번 이동은
//1,3,5,6,7이므로 가로가 최소 7이상이여만 한다. 만약 7보다 작다면 위 상술하였듯이 최대 4까지만 이동이 가능하며, 가로 1칸 움직이는 1,4번
//이동의 수와 비교하여 최소값을 출력한다.

//그 이후 세로가 3이상이며 가로가 7이상일때에는 최소값인 7일때 이동값이 5였고 그 이후 가로로 1씩 이동하면 되므로 가로 - 2의 값을 출력한다.

int N, M;

void MakeAnswer()
{
    if (N == 1)
        cout << 1 << '\n';
    else if (N == 2)
        cout << min(4, (M + 1) / 2) << '\n';
    else if (M < 7)
        cout << min(4, M) << '\n';
    else
        cout << M - 2 << '\n';
}

void Input()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> N >> M;
}

int main()
{
    Input();
    MakeAnswer();
    return 0;
}