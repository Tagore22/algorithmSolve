#include <iostream>

using namespace std;

//브론즈였는데 뭔가 이상해서 보니까 정답률이 10프로대였다;
//생각해야할 조건이 꽤나 많은 까다로운 문제였다.

//주의할점
//가장 처음으로 주의해야 할 것은 음악이 0초부터 시작한다는 것이다. 예를 들어 3초짜리 음악이라면 1,2,3이 아닌 0,1,2로써 2초에 음악이
//끝난다.

//풀이
//전체적인 풀이는 재생할 음악이 남았을 경우와 남지 않았을경우로 나뉜다. 
//1. 남았을 경우에는 먼저 음악을 재생하고 그 이후 5초간 전화벨이 울리는지를 확인해보고 울린다면 D(answer)를 출력하고 그렇지 않다면 
//다시 5초를 추가해야하는데 이부분에서 이미 모든 음악이 재생됬다면 더이상의 추가 시간은 필요치 않으므로 무시한다. 또한 D(answer)는 
//그다음 전화벨이 울리는 시간인데 음악이 끝난 후 5초간만 전화를 받을수 있기에 절대로 음악 재생이 끝나는 시간보다 작을수없다. 
//그렇기에 음악재생이 끝난후 현 시간과 비교해서 적다면 클때까지 D를 더해 증가시켜준다.

//2. 재생할 음악이 남지 않았따면 언제든지 전화를 받을수 있으니 answer를 출력해주면 된다. 또한, 이시점의 answer는 이미 무조건 t보다
//큰상태이므로 따로 연산을 할 필요가 없다.


int N, L, D;

void MakeAnswer()
{
    int t = -1, answer = D;
    while (true)
    {
        if (N > 0)//재생해야할 음악들이 남아 있을 경우
        {
            --N;
            t += L;
            while (answer <= t)//음악 재생후 answer가 적다면 영원히 전화를 받을수 없으므로 재생후 시간보다 클때까지 D를 더함
                answer += D;
            if (t + 5 >= answer)//음악 재생후 5초간 전화가 울리는가
            {
                cout << answer << '\n';
                return;
            }
            t = N > 0 ? t + 5 : t;//앞으로 재생해야할 음악이 있다면 5초간의 공백을, 없다면 무시
        }
        else//재생해야할 음악이 없는 경우. answer는 이미 t보다 커져있으며, 언제든지 전화를 받을수 있기에 answer를 곧바로 출력하면 된다.
        {
            cout << answer << '\n';
            return;
        }
    }
}

void Input()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> N >> L >> D;
}

int main()
{
    Input();
    MakeAnswer();
    return 0;
}