#include <iostream>

using namespace std;

// 풀이.
// 투포인터 문제지만 조건이 꽤나 까다롭고 많은 문제이다. 왼쪽이 l이고, 오른쪽이 r인 범위가 0부터 시작할때
// r + 1이 처음 등장한 수라면 r을 오른쪽으로 넓혀 나가고 이미 등장한 수라면 l을 왼쪽으로 줄여나간다.
// 이때 기존의 l이 등장하지 않음을 갱신해야하고 만약 r이 전혀 움직이지 못한 상태라 l보다 작아진다면
// r은 l에서부터 시작하며 l은 등장했음을 따로 갱신해주어야 한다. 이렇게 l이 N - 1이 되기전까지 반복한다.
// N - 1에서는 무조건 1개밖에 만들지 못함으로 최종값에 1을 더해 출력한다. 정답율이 35퍼도 안되는 만큼
// 어려운 문제였고 시간도 많이 들였다.

// 자세한 설명은 주석으로 남긴다.

int board[100000];
bool visit[100001];
// 범위값은 모두 0 ~ 0에서 시작한다.
int N, l = 0, r = 0, ans = 1;
// 최대 10만 * 10만 = 100억의 값이 나올수도 있기에 long long을 사용한다.
long long answer = 0;

void MakeAnswer()
{
    // 초기 범위값은 이미 등장했으므로 등장 여부를 갱신해주고 시작한다.
    visit[board[0]] = true;
    // 상술한대로 N - 1에서는 무조건 1개만 만들수 있으므로 범위의 시작값인 l이 N - 1이전까지
    // 반복한다.
    while (l < N - 1)
    {
        // r은 N - 1까지 또한 r + 1이 아직 등장하지 않은 수일때에만 오른쪽으로 이동해야한다.
        while (r < N - 1 && !visit[board[r + 1]])
        {
            // 현재 만들수 있는 수와 r의 위치값을 1 증가하고
            // r의 위치에 있는 수가 등장했음을 갱신한다.
            ++ans;
            ++r;
            visit[board[r]] = true;
        }
        // r이 N - 1까지 최대치로 이동했거나, r의 다음 위치에 이미 등장한 수가 또 나왔을때.
        // 현재 만들수 있는 수를 최종값 answer에 더해준다.
        answer += ans;
        // l이 왼쪽으로 이동하는 만큼 현재값은 1 줄어든다. 다만 이번턴에 r이 아예 움직이지 못해서
        // 기존에 ans이 0일 경우 1을 빼면 0이 된다. 하지만 ans는 0이 되어선 안된다. 그 어떤 경우에도
        // 최소 1개는 만들수 있기 때문이다. 따라서 ans - 1과 1을 비교하여 더 큰수로 갱신한다.
        ans = max(ans - 1, 1);
        // 이동전 l의 위치값에 있는 수는 등장하지 않은걸로 갱신한다. 범위값에 존재하지 않게 되기 때문이다.
        visit[board[l]] = false;
        // l의 위치값을 왼쪽으로 이동한다.
        ++l;
        // 만약 이번턴에 r이 아예 움직이지 못했다면 r은 그대로인데 l이 왼쪽으로 움직여서
        // r이 더 작아지는 경우가 생긴다. 범위의 시작이 l이므로 r은 최소 l이 되어야 한다.
        // 따라서 r을 l로 갱신한다. 또한 현재 l의 위치는 r도 접근하지 못한 미지의 위치이므로 
        // 방문 여부를 건드리지 못한 상태이기에 따로 방문 여부를 갱신해준다. 
        if (r < l)
        {
            r = l;
            visit[board[l]] = true;
        }
    }
    // 마지막 N - 1에서 만들수 있는 값 1을 더해서 최종답 answer를 출력한다.
    cout << answer + 1 << '\n';
}

void Input()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> N;
    for (int i = 0; i < N; ++i)
        cin >> board[i];
}

int main()
{
    Input();
    MakeAnswer();
    return 0;
}