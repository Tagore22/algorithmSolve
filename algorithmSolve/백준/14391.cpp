#include <iostream>
#include <algorithm>

using namespace std;

// 풀이.
// 평소 비트마스크 문제를 자주 접하지 않아 풀이가 쉽사리 떠오르지 않았으나,
// 막상 구현자체는 어렵지 않은 문제였다. 처음에는 최대값을 만들려면
// 어떻게 되든 자리수가 큰 수끼리 더해야 했으므로, 각각 세로 가로로 수들을 더해서
// 그 총합이 가장 큰 수를 출력하면 되는게 아닌가라는 생각을 했는데
// 그 반례가 다음과 같다.

// 0 0 0 1
// 0 0 0 0
// 0 0 0 0
// 1 0 0 0

// 각각 세로, 가로로 자르면 1000 + 0001이 되어 1001이 나오지만 실제 답은
// 1000 + 100으로 1100이 나와야 한다.

// 그렇기에 결과적으로 완전탐색을 해야했다. 그런데 잘 살펴보면 다음과 같은 특성이 있다.

// 1. 모든 칸은 가로 혹은 세로의 값을 지녀야한다.
// 2. 각 가로와 세로의 최대값은 4이므로 최대 칸의 수는 16이다.

// 그렇기 때문에 백트래킹 같은 직접 하나씩 대입해가는 완전탐색이 아닌
// 이미 모든 결과를 알고 있는 상태에서의 완전탐색이 가능하다.
// 즉, 16개의 bit를 지닌 마스크로 모든 상황을 파악할수 있다.

// 마스크를 0부터 (1 << 16) - 1까지의 수의 dp로 두고 1씩 증가시키면서 순회하되,
// 현재값이 1이면 가로, 0이면 세로로 치고 각 값들을 대입시켜 최종값을 비교하면 된다.

// 자세한 설명은 주석으로 남긴다.

int board[4][4];
int N, M;

void MakeAnswer() // 가로가 1, 세로가 0.
{
    int sum, cur, answer = 0;
    // 상술하였듯 0 ~ (1 << 16) - 1로 모든 경우를 만들수 있다.
    // 각각 1은 가로를, 0은 세로로 이어져있음을 뜻하고
    // 모든 좌표를 순회하며 값들을 처리만 하면 된다.
    for (int mask = 0; mask < (1 << N * M); ++mask)
    {
        sum = 0;
        // 가로로 이어진 수들을 더하는 경우.
        for (int i = 0; i < N; ++i)
        {
            cur = 0;
            for (int j = 0; j < M; ++j)
            {
                // 현재 경우에서 현재 좌표가 가로(1)일 경우.
                // 현재 합을 10곱한후 현재값을 더해준다.
                if (mask & (1 << (i * M + j)))
                {
                    cur = cur * 10 + board[i][j];
                }
                // 가로가 아닐 경우.
                // 합을 최종합에 더한후 0으로 초기화 시킨다.
                else
                {
                    sum += cur;
                    cur = 0;
                }
            }
            // 나머지 합을 최종합에 더해준다.
            sum += cur;
        }

        // 세로로 이어진 수들을 더하는 경우.
        // 방향만 다를뿐 위와 동일하다.
        for (int j = 0; j < M; ++j)
        {
            cur = 0;
            for (int i = 0; i < N; ++i)
            {
                // 세로는 0이므로 반전시켜 1로 바꾸어 처리해준다.
                if (~mask & (1 << (i * M + j)))
                {
                    cur = cur * 10 + board[i][j];
                }
                else
                {
                    sum += cur;
                    cur = 0;
                }
            }
            sum += cur;
        }
        answer = max(answer, sum);
    }
    cout << answer << '\n';
}

void Input()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> N >> M;
    string str;
    for (int i = 0; i < N; ++i)
    {
        cin >> str;
        for (int j = 0; j < M; ++j)
            board[i][j] = str[j] - '0';
    }
}

int main()
{
    Input();
    MakeAnswer();
    return 0;
}